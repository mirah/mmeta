// copyright 2009 ActiveVideo; license: MIT; see license.txt
package jmeta;
import java.util.*;

public parser MMetaCompiler {
    def self.main(args:String[]) {
      returns void
      if args.length < 1
          puts "JMetaParser <input> [output]"
          System.exit(2)
      end
      # if args.length > 1 && args[1].equals("--embed")
      #     embed = true
      # end
      if args.length > 1
        output_file = args[1]
      else
        output_file = args[0] + ".mirah"
      end
      input = Utils.readFile(args[0])
      compiler = MMetaCompiler.new
      # compiler.embedded = embed
      parser = JMetaParser.new
      BaseParser.tracing = false
      ast = parser.parse(input)
      BaseParser.tracing = false
      # puts BaseParser.print_r(ast)

      output = String(compiler.parse(ast))
      Utils.writeFile(output_file, output)
      System.exit(0)
    }

    def initialize {
      @jpackage = String(nil)
      @embedded = false
      @locals = ArrayList.new
      @methods = ArrayList.new
      @rules = ArrayList.new
      @ranges = HashMap.new
      @sname = "ERROR-sname-ERROR"
      @name = "ERROR-name-ERROR"
      @_ = "  "
      @__genc = -1
      @left_recursion = Boolean.getBoolean("mmeta.left_recursion")
      @auto_memo = Boolean.getBoolean("mmeta.auto_memo")
    }
    def reset {
        @locals = ArrayList.new
        @methods = ArrayList.new
        @rules = ArrayList.new
    }

    def addLocal(n:Object) {
        s = String(n).intern
        @locals.add(s) unless @locals.contains(s)
    }
    def localsAsArgs {
      localsAsCall
    }
    def localsAsCall {
        join(@locals, ",")
    }
    def localsAsInit {
      return '' if @locals.size == 0
      res = join(@locals, " = ") + " = Object(nil)\n"
      @locals.clear
      res
    }

    def embedded_set(embedded:boolean) {@embeded = embedded}

    def indent  { @_ = @_ + "  " }
    def outdent { @_ = @_.substring(2) }

    def genvar { "" + (@__genc = @__genc + 1); }

    destruct: ! t=_ r=apply(t) end    { r } ;
    trans: [ r=destruct ]             { r } ;

    HList ls=trans* {
      if List(ls).size == 0
        "ArrayList.new"
      else
        "[#{join(ls, ", ")}]"
      end
    };
    HConcat l=trans r=trans { "concat(#{l}, #{r})" };
    HStr c=_ { "\"#{c}\"" };
    HLit c=_ { c } ;

    Node n=_ c=trans {"build_node('#{n}', #{c}, _real_start > 1 ? _real_start : _start, _pos)"};

    Error msg=_ {
        DoError.new(msg);
    };
    Set n=_ x=trans {
        addLocal(n);
        "#{x}\n#{@_}#{n}=_t;"
    };
    Str s=_ { compile_literal_string(s) };
    Sym s=_ { "_t=_sym(\"#{s}\");" };


    App :super rule=_ args=trans+ {
        arg_str = if List(args).size == 1
          join(args, ", ")
        else
          "ArrayList.new([#{join(args, ", ")}]).toArray"
        end
        "_push(#{arg_str}); _t=super();"
    };
    App :super rule=_ { "_t=super();" };
    App rule=_ args=trans+ {
        arg_str = if List(args).size == 1
          join(args, ", ")
        else
          "ArrayList.new([#{join(args, ", ")}]).toArray"
        end
        "_push(#{arg_str}); _t=self.#{rule}();"
    };
    App rule=_ { "_t=self.#{rule}();" };

    # Don't include whitespace at the beginning of the rule in it's position
    Dot {"if _start == _pos;_t=ws();_real_start=_pos;nil;else;_t=ws();end;"};

    SAct expr=trans { "_t=#{expr};" };
    Act expr=_ {
        "_t=(#{expr});"
    };
    Pred expr=_ {
        "_t = (#{expr}) ? nil : BaseParser.__ERROR__;"
    };
    SynPred! pred=trans indent t=trans e=trans {
      "#{pred}\n#{outdent}" \
      "unless _t == BaseParser.__ERROR__\n" \
      "#{@_}_t=nil\n" \
      "#{@_}#{t}\n" \
      "#{@_}nil\n" \
      "#{@_}else\n" \
      "#{@_}_t=nil\n" \
      "#{@_}#{e}\n" \
      "#{@_}nil\n" \
      "#{@_}end\n"
    };

    Token name=_ {
      "#{@_}_t = _lex(Tokens.t#{name})\n"
    };
    TokenRange first=_ last=_ {
      "#{@_}_tok = _lex()  # #{first}..#{last}\n" \
      "_t = #{lookup_range(first, last)}.contains(_tok.type) ? Object(_tok) : BaseParser.__ERROR__\n" \
      "self._pos=_tok.pos if _t == BaseParser.__ERROR__"
    };
    TLit name=_ {
      " # #{name}\n#{@_}    build_token(#{lookup_token(name)}, _start, _real_start)"
    };

    Or indent xs=(x=trans { "#{@_}#{x}\n#{@_}break unless _t == BaseParser.__ERROR__\n" }
        )* { "_t=BaseParser.__ERROR__; begin  # or\n#{join(xs, "\n")}#{outdent}end while false\n" };


    And indent ts=trans+ {
        var = genvar
        err = String(nil)
        xs = List(ts)
        b = "begin; _p#{var}=_pos; _t=nil; begin  # and\n"
        xs.each do |x|
          if x.kind_of?(DoError)
            err = DoError(x).message
            next
          end
          b = if err.nil?
            "#{b}#{@_}#{x}\n#{@_}break if _t == BaseParser.__ERROR__\n"
          else
            "#{b}#{@_}#{x}\n#{@_}raise SyntaxError.new(\"#{err}\", _pos, _string, _list) if _t == BaseParser.__ERROR__\n"
          end
        end
        outdent();
        "#{b}#{@_}end while false; self._pos=_p#{var} if (_t==BaseParser.__ERROR__); end\n"
    };
    And { "" };

    def makeMany(x:Object, many1:boolean) {
        var = genvar
        b = "as#{var} = ArrayList.new\n"
        if (many1)
          b = "#{b}#{@_}#{x}\n#{@_}if (_t!=BaseParser.__ERROR__)\n#{indent}as#{var}.add(_t)\n"
        end

        b = "#{b}#{@_}while true  # many\n" +
            "#{@_}#{x}\n" +
            "#{@_}if (_t==BaseParser.__ERROR__); break; else as#{var}.add(_t);nil;end\n" +
            "#{@_}end; _t=as#{var}\n"

        if (many1)
          b= "#{b}\n#{outdent}end\n"
        end
        b;
    }
    Many  indent x=trans outdent { makeMany(x, false) } ;
    Many1 indent x=trans outdent { makeMany(x, true)  } ;

    Opt indent x=trans outdent { "#{x}\n#{@_}_t=(_string.nil? ? \"\" : nil) if _t == BaseParser.__ERROR__;" };

    Not x=trans { "#{@_}#{x}\n_t = (_t == BaseParser.__ERROR__ ? Object(Boolean.valueOf(true)) : BaseParser.__ERROR__);"};

    Peek x=trans {
      var = genvar
      
      "begin\n#{indent}_l#{var}=_pos\n#{@_}#{x}\n#{@_}self._pos=_l#{var} if (_t!=BaseParser.__ERROR__)\n#{outdent}end\n"
    };

    List indent x=trans outdent {
        "_t=_listBegin(); if (_t!=BaseParser.__ERROR__)\n#{@_}  #{x}\n#{@_}_listEnd(); end;"
    };

    MemoRule n=_ b=trans {
      rule_body(n, b, true)
    };

    Rule n=_ b=trans {
      rule_body(n, b, false)
    };

    Scope names=_ indent body=trans outdent {
      pre = StringBuilder.new
      post = StringBuilder.new
      l = Object[].cast(names)
      l.each do |_name|
        name = String(_name)
        saved = "__saved_#{name.replace('@', '')}"
        pre.append("#@_#{saved} = #{name}\n")
        post.append("#@_  #{name} = #{saved}\n")
      end
      "#{pre}#{@_}begin\n#{@_}#{body}\n#{@_}ensure\n#{post}#{@_}end\n"
    };

    Parser p=_ n=_ s=_ { @name = String(n); @sname = String(s); nil } xs=trans* {
        b = "\nclass #{@name} < #{@sname}\n  def _init;#{build_init};end\n" +
            join(xs) + "\n" + join(@methods) + "\n" +
            "  def _jump(r:string)\n"

        @rules.each do |r|
          b = "#{b}    return #{r}() if (r==\"#{r}\")\n"
        end
        b = b +
            "    super(r)\n" +
            "  end\n" +
            "  def _has(r:string)\n"

        @rules.each do |r|
          b = b + "    return true if r==\"#{r}\"\n"
        end

        b = b +
            "    super(r)\n" +
            "  end\n" +
            "end\n"
        reset
        b
    };

    Method  c=_ { "  #{c}\n" } ;
    Field   c=_ { "  #{c}\n" } ;
    Package c=_ { @jpackage = String(c); ""; } ;
    Import  c=_ { c } ;
    Class   q=_ d=_ c=_ { "#{d}\n#{c}\nend" } ;
    Line  ws=_ x=trans { ws.toString + x.toString } ;

    File  xs=trans* {
        "# generated by mmeta on #{Date.new}\n" +
        "# do not modify, instead edit original .mmeta file\n" +
        "import java.util.ArrayList\n" +
        "import java.util.Date\n" +
        "import java.util.List\n" +
        "import java.util.EnumSet\n" +
        (@embedded ? "" : "import jmeta.*;\n") + join(xs)
    } ;

    start: ! r=destruct end           { r } ;

    def unescape(s:String) {
      sb = StringBuilder.new
      i = 0
      while i < s.length
        if s.charAt(i) == 92 # ?\\
          i += 1
          c = s.substring(i, i + 1)
          if c.equals("n")
            sb.append("\n")
          elsif c == "s"
            sb.append("\s")
          elsif c == "r"
            sb.append("\r")
          elsif c == "t"
            sb.append("\t")
          elsif c == "v"
            sb.append("\v")
          elsif c == "f"
            sb.append("\f")
          elsif c == "b"
            sb.append("\b")
          elsif c == "a"
            sb.append("\a")
          elsif c == "e"
            sb.append("\e")
          else
            sb.append(c)
          end
        else
          sb.append(s.charAt(i))
        end
        i += 1
      end
      return sb.toString.toCharArray
    }

    def compile_literal_string(_s:Object) {
      s = unescape(String(_s))
      if s.length == 0
        "_t = ''\n"
      else
        var = "_p#{genvar}"
        sb = StringBuilder.new("#{@_}_t = BaseParser.__ERROR__\n")
        sb.append("#{@_}#{var} = _pos\n")
        sb.append("#{@_}begin\n")
        sb.append("#{@_}  break if #{var} + #{s.length} > @chars.length\n")
        s.each do |c|
          sb.append("#{@_}  break unless @chars[#{var}] == #{c}\n")
          sb.append("#{@_}  #{var} += 1\n")
        end
        sb.append("#{@_}  _t = \"#{_s}\"; self._pos = #{var}\n")
        sb.append("#{@_}end while false\n")
        sb.toString
      end
    }

    def lookup_token(name:Object) {
      @tokens ||= ArrayList.new
      index = @tokens.indexOf(name)
      if index == -1
        index = @tokens.size
        @tokens.add(name)
      end
      return index
    }

    def lookup_range(first:Object, last:Object) {
      key = "#{first},#{last}"
      val = String(@ranges.get(key))
      if val.nil?
        val = "@_trange#{@ranges.size}"
        @ranges.put(key, val)
      end
      val
    }

    def build_init {
      code = StringBuilder.new("\n@chars = _chars\nsuper()\n")
      @ranges.keySet.each do |key|
        tokens = String(key).split(",")
        first = tokens[0]
        last = tokens[1]
        name = @ranges.get(key)
        code.append("#{name} = EnumSet.range(Tokens.t#{first}, Tokens.t#{last})\n")
      end
      code.toString
    }

    def rule_body(n:Object, b:Object, force_memo:boolean) {
      @rules.add(n)
      if @left_recursion
        rfunc = "_retrieve"
        loop_start = "    begin"
        loop_end = "end while (_t==BaseParser.__GROW__); "
      else
        rfunc = "_sretrieve"
        loop_start = ""
        loop_end = ""
      end

      if force_memo || @auto_memo
        find = "_t=#{rfunc}(\"#{@name}.#{n}\"); return _exit(_t) if (_t!=BaseParser.__NOT_MEMOIZED__)"
        save = "_memoize(\"#{@name}.#{n}\", _start, _t)"
      else
        find = ""
        save = "_t"
      end
      "
        def #{n}:Object
          _t = Object(nil); _start = _pos; _real_start = -1
          _enter('#{n}')
          #{find}
          #{localsAsInit}#{loop_start}
          #{b}
          _t=_exit(#{save})
          #{loop_end}BaseParser.__ERROR__.last=\"#{n}\" if (_t==BaseParser.__ERROR__)
          return _t
        end
      "
    }
}
