// copyright 2009 ActiveVideo; license: MIT; see license.txt
package mmeta;
import java.util.*
import java.io.File
import java.text.SimpleDateFormat
import hapax.TemplateCache
import hapax.TemplateDataDictionary
import hapax.TemplateDictionary
import hapax.TemplateResourceLoader


public parser MMetaCompiler {
    def self.main(args:String[]):void {
      if args.length < 1
          puts "MMetaCompiler <input> [output]"
          System.exit(2)
      end
      # if args.length > 1 && args[1].equals("--embed")
      #     embed = true
      # end
      options = {recursion: Boolean.valueOf(false), auto_memo: Boolean.valueOf(false), debug: Boolean.valueOf(false)}
      templates = { }
      i = 0
      while i < args.length && args[i].startsWith('--')
        arg = args[i].substring(2)
        if options.containsKey(arg)
          options.put(arg, Boolean.valueOf(true))
        elsif "tpl".equals(arg)
          i += 1
          arg = args[i]
          pieces = arg.split('=')
          templates[pieces[0]] = File.new(pieces[1]).getAbsolutePath
        else
          puts "Unrecognized option --#{arg}."
          puts "Supported options: #{options.keySet}"
          System.exit(1)
        end
        i += 1
      end
      if args.length > i
        output_file = args[i + 1]
      else
        output_file = args[i] + ".mirah"
      end
      input = Utils.readFile(args[i])

      compiler = MMetaCompiler.new
      compiler.left_recursion = Boolean(options.get(:recursion)).booleanValue
      compiler.auto_memo = Boolean(options.get(:auto_memo)).booleanValue
      compiler.debug = Boolean(options.get(:debug)).booleanValue
      compiler.template_paths.putAll(templates)
      # compiler.embedded = embed
      parser = MMetaParser.new
      BaseParser.tracing = false
      ast = parser.parse(input)
      BaseParser.tracing = false
      # puts BaseParser.print_r(ast)

      output = String(compiler.parse(ast))
      Utils.writeFile(output_file, output)
      System.exit(0)
    }

    def initialize {
      @jpackage = String(nil)
      @embedded = false
      @locals = ArrayList.new
      @methods = ArrayList.new
      @rules = ArrayList.new
      @ranges = HashMap.new
      @sname = "ERROR-sname-ERROR"
      @name = "ERROR-name-ERROR"
      @_ = "  "
      @__genc = -1
      @left_recursion = Boolean.getBoolean("mmeta.left_recursion")
      @auto_memo = Boolean.getBoolean("mmeta.auto_memo")
      @templates = TemplateResourceLoader.create('mmeta/templates/')
      @custom_templates = TemplateCache.create('/')
      @user_template_paths = {}
      @debug = Boolean.getBoolean("mmeta.debug")
    }

    def template_paths { @user_template_paths }

    def left_recursion_set(value:boolean) {
      @left_recursion = value
    }

    def auto_memo_set(value:boolean) {
      @auto_memo = value
    }

    def debug_set(value:boolean) {
      @debug = value
    }

    def reset {
        @locals = ArrayList.new
        @methods = ArrayList.new
        @rules = ArrayList.new
    }
    
    def timestamp_string {
      dateFormat = SimpleDateFormat.new("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);
      dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
      return dateFormat.format(Date.new);
    }

    def addLocal(n:Object) {
        s = String(n).intern
        @locals.add(s) unless @locals.contains(s)
    }
    def localsAsInit {
      @locals.each do |local|
        @dict.addSection(:LOCALS).setVariable(:LOCAL, local.toString)
      end
      @locals.clear
    }

    def embedded_set(embedded:boolean) {@embeded = embedded}

    def genvar { "" + (@__genc = @__genc + 1); }

    destruct: ! t=_ r=apply(t) end    { r } ;

    $Scope[@dict]
    trans: [ r=destruct ]             { r } ;

    HList: ls=trans* {
      if List(ls).size == 0
        "ArrayList.new"
      else
        "[#{join(ls, ", ")}]"
      end
    };
    HConcat: l=trans r=trans { "concat(#{l}, #{r})" };
    HStr: c=_ { "\"#{c}\"" };
    HLit: c=_ { c } ;

    Node: n=_ [:HList ls=trans*] {
      add_dict
      @dict.setVariable(:TYPE, n.toString)
      if ls.isEmpty
        @dict.showSection(:NO_CHILDREN)
      else
        @dict.showSection(:CHILDREN)
      end
      ls.each do |x|
        @dict.addSection(:CHILD).setVariable(:CHILD, x.toString)
      end
      render(:node)
    };

    Error: msg=_ body=trans {
      add_dict
      @dict.setVariable(:MESSAGE, msg.toString)
      add_expr(:BODY, body)
      render(:syntax_error)
    };
    Set: n=_ x=trans {
        addLocal(n);
        add_dict
        @dict.setVariable(:NAME, n.toString)
        add_expr(:EXPR, x)
        render(:save_to_var)
    };
    Str: s=_ { compile_literal_string(s) };
    Sym: s=_ { "_sym(\"#{s}\")" };


    App: :super rule=_ args=trans* {
         "super(#{join(args, ", ")})"
         }
       | rule=_ args=trans* {
         "self.#{rule}(#{join(args, ", ")})"
         }
       ;

    Dot: {"ws()"};

    SAct: expr=trans { "#{expr}" };
    Act: expr=_ {
        add_dict
        add_expr(:BODY, expr)
        render(:action)
    };
    Pred: expr=_ {
      add_dict
      unless expr.nil? || "false".equals(expr.toString.trim)
        @dict.setVariable(:EXPR, expr.toString)
      end
      render('predicate')
    };
    SynPred: ! pred=trans body=trans tail=(trans | end {nil}) {
      add_dict
      add_expr(:PRED, pred)
      add_expr(:BODY, body)
      unless tail.nil?
        add_expr(:ELSE, tail, @dict.addSection(:ELSE))
      end
      render('syn_pred')
    };

    AToken: name=_ {
      "_lex(Tokens.t#{name})"
    };
    TokenRange: first=_ last=_ {
      range = lookup_range(first, last)
      add_dict
      @dict.setVariable(:FIRST, first.toString)
      @dict.setVariable(:LAST, last.toString)
      @dict.setVariable(:RANGE, range)
      render('token_range')
    };
    TLit: name=_ {
      token = Integer.valueOf(lookup_token(name))
      add_dict
      @dict.setVariable(:NAME, name.toString)
      @dict.setVariable(:TOKEN, token.toString)
    };

    Or: xs=trans* {
      dict = add_dict
      dict.setVariable(:ELSE, 'or')
      exprs = List(xs)
      if exprs.size == 0
        ""
      elsif exprs.size == 1
        @dict.setVariable(:EXPR, exprs.get(0).toString)
        render(:simple_expr)
      else
        0.upto(exprs.size - 2) do |i|
          expr = exprs.get(i)
          add_expr(:EXPR, expr)
          @dict = @dict.addSection(:ELSE) unless i == (exprs.size - 2)
        end
        add_expr(:ELSE, exprs.get(exprs.size - 1))
        render('or', dict)
      end
    };

    And: ts=trans+ {
           add_dict
           @dict.setVariable(:VAR, genvar)
           err = String(nil)
           List(ts).each do |expr|
             add_expr(:EXPR, expr, @dict.addSection(:EXPR))
           end
           render('and')
         }
       | { "" }
       ;

    def makeMany(x:Object, many1:boolean) {
      add_dict
      @dict.setVariable(:VAR, genvar)
      @dict.setVariable(:LIST_ITEMS, :list_items)
      add_expr(:EXPR, x)
      add_expr(:EXPR, x, @dict.addSection(:LIST_ITEMS))
      if many1
        render('build_non_empty_list')
      else
        render('build_list')
      end
    }
    Many: x=trans { makeMany(x, false) } ;
    Many1: x=trans { makeMany(x, true)  } ;

    Opt: x=trans {
      add_dict
      add_expr(:EXPR, x)
      render('opt')
    };

    Not: x=trans {
      add_dict
      add_expr(:EXPR, x)
      render('not')
    };

    Peek: x=trans {
      add_dict
      @dict.setVariable(:VAR, genvar)
      add_expr(:EXPR, x)
      render('peek')
    };

    List: x=trans {
      add_dict
      add_expr(:EXPR, x)
      render('list')
    };

    Rule: name=_ args=_ body=trans annotations=_ {
      @rules.add(name) if args.nil?
      add_dict
      @dict.setVariable(:RULE, name.toString)
      @dict.setVariable(:MEMO_KEY, "#{@name}.#{name}")
      @dict.showSection(:DEBUG) if @debug
      @dict.setVariable(:ARGS, args.toString) if args
      memoized = @auto_memo
      type = nil
      List(annotations).each do |_anno|
        anno = List(_anno)
        if "Memo".equals(anno.get(0))
          memoized = true
          type = anno.get(1)
        elsif "Returns".equals(anno.get(0))
          type = anno.get(1)
        elsif "Scope".equals(anno.get(0))
          saved_names = List(anno.get(1))
          @dict.showSection(:SCOPE)
          saved_names.each do |_name|
            var_name = String(_name)
            dict = @dict.addSection(:SCOPE_VARS)
            dict.setVariable(:NAME, var_name)
            dict.setVariable(:SIMPLE_NAME, var_name.replace('@', ''))
          end
        end
      end
      memoized = false if args
      localsAsInit
      @dict.setVariable(:CAST, type.toString) if type
      if memoized
        @dict.showSection(:MEMO)
        if @left_recursion
          @dict.showSection(:RECURSION)
          @dict.setVariable(:MEMO_RULE, :memo_rule)
          @dict.setVariable(:RULE_BODY, :recursive_rule)
        else
          @dict.showSection(:NO_RECURSION)
          @dict.setVariable(:RULE_BODY, :memo_rule)
        end
        add_expr(:BODY, body, @dict.addSection(:RULE_BODY))
      else
        @dict.showSection(:UNMEMO)
        @dict.showSection(:NO_RECURSION)
        if type
          @dict.setVariable(:RULE_BODY, :cast)
          section = @dict.addSection(:RULE_BODY)
          section.setVariable(:TYPE, type.toString)
          add_expr(:EXPR, body, section)
        else
          add_expr(:RULE_BODY, body)
        end
      end
      render('rule')
    };

    Parser: p=_ n=_ s=_ { @name = String(n); @sname = String(s) } xs=trans* {
      dict = add_dict
      build_init
      @rules.each do |name|
        @dict.addSection(:RULE).setVariable(:RULE, String(name))
      end
      @dict.setVariable(:PARSER, @name)
      @dict.setVariable(:SUPERCLASS, @sname)
      @dict.setVariable(:JPACKAGE, @jpackage)
      List(xs).each do |expr|
        @dict = dict.addSection(:BODY)
        add_expr(:BODY, expr)
      end
      b = render('parser', dict)
      reset
      b
    };

    Method:  name=_ args=_ returntypeopt=_ body=_ ismacro=_ {
               add_dict
               @dict.setVariable(:NAME, name.toString)
               @dict.setVariable(:ARGS, args.toString)
               @dict.setVariable(:RETURNTYPEOPT, returntypeopt.toString)
               @dict.showSection(:MACRO) if ismacro
               add_expr(:BODY, body)
               render('method')
             }
          |  c=_ { "  #{c}\n" } ;
    Field:   c=_ { "  #{c}\n" } ;
    Package: c=_ { @jpackage = String(c); ""; } ;
    Import:  c=_ { "#{c}\n" } ;
    Class:   q=_ d=_ c=_ { "#{d}\n#{c}\n end" } ;
    Line:  ws=_ x=trans { ws.toString + x.toString } ;

    File:  xs=trans* {
        "# generated by mmeta on #{timestamp_string}\n" +
        "# do not modify, instead edit original .mmeta file\n" +
        "\n" +
        "#{@jpackage ? @jpackage : ""}\n" +
        "\n" +
        "import java.util.ArrayList\n" +
        "import java.util.Date\n" +
        "import java.util.List\n" +
        "import java.util.EnumSet\n" +
        (@embedded ? "" : "import mmeta.*\n") + join(xs)
    } ;

    start: ! r=destruct end           { r } ;

    def unescape(s:String) {
      sb = StringBuilder.new
      i = 0
      while i < s.length
        if s.charAt(i) == 92 # ?\\
          i += 1
          c = s.substring(i, i + 1)
          if c.equals("n")
            sb.append("\n")
          elsif c == "s"
            sb.append("\s")
          elsif c == "r"
            sb.append("\r")
          elsif c == "t"
            sb.append("\t")
          elsif c == "v"
            sb.append("\v")
          elsif c == "f"
            sb.append("\f")
          elsif c == "b"
            sb.append("\b")
          elsif c == "a"
            sb.append("\a")
          elsif c == "e"
            sb.append("\e")
          else
            sb.append(c)
          end
        else
          sb.append(s.charAt(i))
        end
        i += 1
      end
      str = sb.toString
      ints = int[str.length]
      ints.length.times do |i|
        ints[i] = str.charAt(i)
      end
      ints
    }

    def compile_literal_string(_s:Object) {
      s = unescape(String(_s))
      if s.length == 0
        "''"
      else
        add_dict
        @dict.setVariable(:VAR, "_p#{genvar}")
        @dict.setVariable(:STRING, String(_s))
        @dict.setVariable(:LENGTH, String.valueOf(s.length))
        s.each do |i|
          @dict.addSection(:CHAR).setVariable(:CHAR, String.valueOf(i))
        end
        render('string_literal')
      end
    }

    def lookup_token(name:Object) {
      @tokens ||= ArrayList.new
      index = @tokens.indexOf(name)
      if index == -1
        index = @tokens.size
        @tokens.add(name)
      end
      return index
    }

    def lookup_range(first:Object, last:Object) {
      key = "#{first},#{last}"
      val = String(@ranges.get(key))
      if val.nil?
        val = "@_trange#{@ranges.size}"
        @ranges.put(key, val)
      end
      val
    }

    def build_init {
      @ranges.keySet.each do |key|
        dict = @dict.addSection(:RANGE)
        tokens = String(key).split(",")
        dict.setVariable(:FIRST, tokens[0])
        dict.setVariable(:LAST, tokens[1])
        dict.setVariable(:NAME, @ranges.get(key).toString)
      end
    }

    def render(template:String, dict:TemplateDataDictionary=nil) {
      user_path = String(@user_template_paths.get(template))
      tpl = if user_path
        @custom_templates.getTemplate(user_path)
      else
        @templates.getTemplate(template)
      end
      dict ||= @dict
      begin
        tpl.renderToString(dict)
      rescue StackOverflowError
        raise "StackOverflowError caught"
      end
    }

    def add_dict {
      @dict = TemplateDataDictionary(TemplateDictionary.create)
      # @dict.enableDebugAnnotations
    }

    def add_expr(name:String, expr:Object, dict:TemplateDataDictionary=nil) {
      dict ||= @dict
      dict.setVariable(name, :simple_expr)
      dict.addSection(name).setVariable(:EXPR, expr.nil? ? "" : expr.toString)
    }
}
