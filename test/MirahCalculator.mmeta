package test;

parser Calculator2 {
    def self.main(args:String[]):void {
        parser = Calculator2.new
        # BaseParser.tracing = true
        ast = parser.parse(args[0])
        puts Interpreter2.new.parse(ast)
    }

    start: ! e=expr . end      { e };
    expr: .p=pos l=expr ."+"! r=expr1 { [:ADD, l, r, p] }
        | .p=pos l=expr ."-"! r=expr1 { [:SUB, l, r, p] }
        | expr1
    ;
    expr1: .p=pos l=expr1 ."*"! r=value { [:MUL, l, r, p] }
        |  .p=pos l=expr1 ."/"! r=value { [:DIV, l, r, p] }
        |  .p=pos l=expr1 ."%"! r=value { [:MOD, l, r, p] }
        |  value
    ;
    value: ."(" ! e=expr .")" { e }
        |  . p=pos n=num              { [:INT, n, p] }
    ;
    num: ds=digit+ { Integer.valueOf(Integer.parseInt(join(ds))) } ;
}

parser Interpreter2 {
    start: ! r=_ res=apply(r) end   { res } ;
    val: [ ! r=_ res=apply(r) end ] { res } ;

    ADD: l=val r=val _ { Integer.valueOf(Integer(l).intValue + Integer(r).intValue) } ;
    SUB: l=val r=val _ { Integer.valueOf(Integer(l).intValue - Integer(r).intValue) } ;
    MUL: l=val r=val _ { Integer.valueOf(Integer(l).intValue * Integer(r).intValue) } ;
    DIV: l=val r=val _ { Integer.valueOf(Integer(l).intValue / Integer(r).intValue) } ;
    MOD: l=val r=val _ { Integer.valueOf(Integer(l).intValue % Integer(r).intValue) } ;
    INT: v=_ _         { v } ;
}

